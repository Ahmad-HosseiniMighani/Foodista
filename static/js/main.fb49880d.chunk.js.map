{"version":3,"sources":["components/navbar.jsx","components/section1.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","class","href","Section1","$","document","ready","height","window","id","className","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"8JA2CeA,G,iBA1CA,WACb,OACE,yBAAKC,MAAM,kCACT,uBAAGA,MAAM,oBAAoBC,KAAK,KAAlC,YAIA,yBAAKD,MAAM,4BACT,wBAAIA,MAAM,sBACR,wBAAIA,MAAM,wBACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,QACO,0BAAMD,MAAM,WAAZ,eAGT,wBAAIA,MAAM,iBACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,SAIF,wBAAID,MAAM,iBACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,SAIF,wBAAID,MAAM,iBACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,SAIF,wBAAID,MAAM,iBACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,UAKJ,4BAAQD,MAAM,yCAAd,aACA,uBAAGA,MAAM,wC,gBCTFE,EAzBE,WAKf,OAJAC,IAAEC,UAAUC,OAAM,WAChBF,IAAE,aAAaG,OAAOH,IAAEI,QAAQD,UAChCH,IAAE,aAAaG,OAAOH,IAAEI,QAAQD,aAGhC,6BAASE,GAAG,WAAWC,UAAU,OAC/B,kBAAC,EAAD,MACA,yBAAKT,MAAM,qBACT,wBAAIA,MAAM,8BAAV,gBACA,uBAAGA,MAAM,2BAAT,qGAIA,uBAAGA,MAAM,4BAA4BC,KAAK,KAA1C,gBAIF,yBAAKQ,UAAU,4CAAf,eACc,sCCLLC,MAXf,WACE,OACE,yBAAKD,UAAU,wBACb,kBAAC,EAAD,MACA,6BAASD,GAAG,WAAWC,UAAU,OAAjC,SCEcE,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcf,MACrBgB,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fb49880d.chunk.js","sourcesContent":["import React from \"react\";\r\nconst NavBar = () => {\r\n  return (\r\n    <nav class=\"navbar navbar-expand px-5 py-4\">\r\n      <a class=\"navbar-brand ml-5\" href=\"#\">\r\n        Foodista\r\n      </a>\r\n\r\n      <div class=\"collapse navbar-collapse\">\r\n        <ul class=\"navbar-nav mx-auto\">\r\n          <li class=\"nav-item mx-3 active\">\r\n            <a class=\"nav-link\" href=\"#\">\r\n              Home <span class=\"sr-only\">(current)</span>\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item mx-3\">\r\n            <a class=\"nav-link\" href=\"#\">\r\n              Link\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item mx-3\">\r\n            <a class=\"nav-link\" href=\"#\">\r\n              Link\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item mx-3\">\r\n            <a class=\"nav-link\" href=\"#\">\r\n              Link\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item mx-3\">\r\n            <a class=\"nav-link\" href=\"#\">\r\n              Link\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <button class=\"btn btn-success font-weight-bold mr-3\">Order Now</button>\r\n        <i class=\"bx bx-cart ml-4 mr-5 text-white\"></i>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport NavBar from \"./navbar\";\r\nimport $ from \"jquery\";\r\nconst Section1 = () => {\r\n  $(document).ready(function () {\r\n    $(\"#section1\").height($(window).height());\r\n    $(\"#section2\").height($(window).height());\r\n  });\r\n  return (\r\n    <section id=\"section1\" className=\"box\">\r\n      <NavBar />\r\n      <div class=\"col-10 text-white\">\r\n        <h1 class=\"display-3 font-weight-bold\">Hungry much?</h1>\r\n        <p class=\"lead font-weight-normal\">\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n          eiusmod tempor incididunt labore.\r\n        </p>\r\n        <a class=\"btn btn-outline-secondary\" href=\"#\">\r\n          Coming soon\r\n        </a>\r\n      </div>\r\n      <div className=\"col-6 py-5 ml-auto triangle-bottom-right\">\r\n        Scroll down <i>icon</i>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section1;\r\n","import \"boxicons/css/boxicons.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\n\nimport Section1 from \"./components/section1\";\n\nfunction App() {\n  return (\n    <div className=\"container-fluid px-0\">\n      <Section1 />\n      <section id=\"section2\" className=\"box\">\n        asd\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}